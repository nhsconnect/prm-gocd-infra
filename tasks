#!/bin/bash

set -Eeo pipefail

NHS_SERVICE=gocd
AWS_REGION=eu-west-2
AWS_DEFAULT_REGION=$AWS_REGION

function get_aws_ssm_secret {
  secret_id=$1
  json=$(dojo "aws ssm get-parameter --with-decryption --region $AWS_REGION --name $secret_id")
  if [ $? != 0 ]; then
    >&2 echo "Failed to obtain AWS secret from SSM: $secret_id"
    exit 5
  fi
  echo $json | jq -r ".Parameter.Value"
}

function tf_plan {
  operation=$1

  cd terraform/
  terraform init -reconfigure -backend-config key=nhs-${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan" $2
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan" $2 -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  cd terraform/
  terraform init -backend-config key=nhs-${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function generate_ssh_key {
  secret_id="/repo/${NHS_ENVIRONMENT}/prm-gocd-infra/user-input/gocd-id-rsa"
  mkdir -p terraform/ssh/
  if [[ ! -f "terraform/ssh/gocd-${NHS_ENVIRONMENT}" ]]; then
    #TODO check aws authentication
    set +e
    id_rsa=$(aws ssm get-parameter --with-decryption --region $AWS_REGION --name $secret_id | jq -r ".Parameter.Value")
    if [[ $? == 0 ]]; then
      echo "$id_rsa" > terraform/ssh/gocd-${NHS_ENVIRONMENT}
    else
      set -e
      ssh-keygen -f "terraform/ssh/gocd-${NHS_ENVIRONMENT}" -q -N ""
    fi
    set -e
  fi
  chmod 0600 terraform/ssh/gocd-${NHS_ENVIRONMENT}
  ssh-keygen -y -f "terraform/ssh/gocd-${NHS_ENVIRONMENT}" > "terraform/ssh/gocd-${NHS_ENVIRONMENT}.pub"
  aws ssm put-parameter \
   --region $AWS_REGION \
   --name $secret_id \
   --type SecureString \
   --overwrite \
   --value "`cat terraform/ssh/gocd-${NHS_ENVIRONMENT}`"
}

command="$1"
case "${command}" in
  _ssh_key)
      check_env
      generate_ssh_key
      ;;
  ssh_key)
      check_env
      dojo "./tasks _ssh_key"
      ;;
  tf)
      check_env
      ./tasks ssh_key
      dojo "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_plan_agents)
      tf_plan "$2" "-target module.local-agents.aws_ssm_parameter.agent_ips"
      ;;
  tf_plan_agents)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_plan_agents $2"
      ;;
  _tf_plan_server)
      tf_plan "$2" "-target aws_instance.gocd_server"
      ;;
  tf_plan_server)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_plan_server $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      ./tasks ssh_key
      dojo "./tasks _tf_apply"
      ;;
  _provision)
    check_env
    if [ -z "${GOOGLE_CHAT_WEBHOOK}" ]; then
      echo "GOOGLE_CHAT_WEBHOOK must be set"
      exit 5
    fi
    sudo pip install yasha #FIXME: add yasha in the dojo image
    yasha --variables terraform/tf-out.json -o ansible/inventory/${NHS_ENVIRONMENT}.ini ansible/inventory/template.ini.j2
    mkdir -p ansible/group_vars
    cat << EOF > ansible/group_vars/${NHS_ENVIRONMENT}.yml
# This file is generated
env: ${NHS_ENVIRONMENT}
google_chat_webhook: ${GOOGLE_CHAT_WEBHOOK}
EOF
    ansible-playbook -i ansible/inventory/${NHS_ENVIRONMENT}.ini ansible/site.yml
    ;;
  provision)
    check_env
    GOOGLE_CHAT_WEBHOOK=$(get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/prm-gocd-infra/user-input/google-chat-webhook")
    export GOOGLE_CHAT_WEBHOOK
    dojo -c Dojofile-ansible "./tasks _provision"
    ;;
  generate_ssl_certs)
    check_env
    docker run -ti --rm -v $PWD/letsencrypt:/etc/letsencrypt \
     -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
     -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
     -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN  \
     certbot/dns-route53:v0.38.0 certonly \
     --keep-until-expiring  --register-unsafely-without-email \
     --dns-route53 --agree-tos  \
     -d ${NHS_ENVIRONMENT}.gocd.patient-deductions.nhs.uk
    ;;
  sync_certs)
    check_env
    scp -i terraform/ssh/gocd-${NHS_ENVIRONMENT} -r letsencrypt/ "ec2-user@${NHS_ENVIRONMENT}.gocd.patient-deductions.nhs.uk:~/letsencrypt"
    ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
